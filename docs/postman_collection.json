{
	"info": {
		"_postman_id": "b38620bd-495d-431f-b439-d66b336138e8",
		"name": "Core",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22945486"
	},
	"item": [
		{
			"name": "uuid_route",
			"item": [
				{
					"name": "createuuid",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/createuuid"
					},
					"response": []
				},
				{
					"name": "fetchtoken",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/fetchtoken?uuid=74a4097f-2f13-4c84-9db2-95aa753fdb0b",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"fetchtoken"
							],
							"query": [
								{
									"key": "uuid",
									"value": "74a4097f-2f13-4c84-9db2-95aa753fdb0b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getuuid",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/getuuid"
					},
					"response": []
				}
			]
		},
		{
			"name": "public_api",
			"item": [
				{
					"name": "movie_data",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/movie_data"
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "workflow",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/workflow?workflowrepo=FastX",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"workflow"
							],
							"query": [
								{
									"key": "workflowrepo",
									"value": "FastX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "size",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/size"
					},
					"response": []
				},
				{
					"name": "getfiles",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/getfiles"
					},
					"response": []
				},
				{
					"name": "getmappeddata",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/getmappeddata"
					},
					"response": []
				},
				{
					"name": "getvidfiles",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/getvidfiles"
					},
					"response": []
				}
			]
		},
		{
			"name": "getfiles",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/getfiles",
				"description": "```\nreturns total files owned by service account\n\n ```"
			},
			"response": []
		},
		{
			"name": "getfiles Copy",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/getfiles",
				"description": "```\nreturns total files owned by service account\n\n ```"
			},
			"response": []
		},
		{
			"name": "movie_data",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/movie_data",
				"description": "```\nget movie_data from database\n\n ```"
			},
			"response": []
		},
		{
			"name": "getmappeddata",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/getmappeddata",
				"description": "(check if github exists for file in drive){mutant of getvidfiles}"
			},
			"response": []
		},
		{
			"name": "get_telecore_data",
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/get_telecore_data"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "localhost:8080",
			"type": "string"
		}
	]
}